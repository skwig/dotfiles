" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

let mapleader=" "

" Plugins
set highlightedyank
set easymotion
set NERDTree
set which-key

" General settings
set scrolloff=5
set incsearch
set relativenumber number
set clipboard^=ideaput
set keymodel=startsel,stopsel

" Disable annoying bells
set visualbell
set noerrorbells

" Don't use Ex mode, use Q for formatting.
map Q gq

" NOPs
nnoremap <leader> <NOP>

" Redo with Shift
nmap <S-u> <C-r>

" Custom movement
"" Halfpage jumps to Shift
nnoremap <S-k> <C-u>
nnoremap <S-j> <C-d>

"" Tabs
map <A-i> <Action>(PreviousTab)
map <A-o> <Action>(NextTab)

" IDE features
map <leader>k <Action>(ToggleLineBreakpoint) |" BreaKpoint

" Refactoring
map <leader>rt <Action>(Refactorings.QuickListPopupAction) |" Refactor this
map <leader>rm <Action>(ExtractMethod) |" Refactor method
map <leader>rv <Action>(IntroduceVariable) |" Refactor variable
map <leader>rp <Action>(IntroduceParameter) |" Refactor parameter
map <leader>rc <Action>(IntroduceConstant) |" Refactor constant
map <leader>rf <Action>(IntroduceField) |" Refactor field

" Movement
map <leader>ll <Action>(GotoDeclaration) |" Look (at)
map <leader>li <Action>(GotoImplementation) |" Look (at) implementation
map <leader>ls <Action>(GotoSuperMethod) |" Look (at) super (method)
map <leader>lt <Action>(GotoTest) |" Look (at) tests
map <leader>lu <Action>(ShowUsages) |" Look (at) usages

" Build
map <leader>bw <Action>(ActivateBuildToolWindow) |" Build window
map <leader>bt <Action>(BuildSelection) |" Build this
map <leader>bs <Action>(BuildSolutionAction) |" Build  solution
map <leader>bc <Action>(CancelBuildAction) |" Build cancel

" Editor
map <leader>eq <Action>(CloseContent) |" Editor quit

"" Tests
map <leader>tw <Action>(ActivateTestsToolWindow) |" Test window
map <leader>tt <Action>(RiderUnitTestRunContextAction) |" Test this
map <leader>td <Action>(RiderUnitTestDebugContextAction) |" Test debug (this)
map <leader>ts <Action>(RiderUnitTestRunCurrentSessionAction) |" Test session
map <leader>tr <Action>(RiderUnitTestRepeatPreviousRunAction) |" Test repeat
map <leader>tg <Action>(RiderGenerateUnitTestAction) |" Test generate
map <leader>tm <Action>(Rider.UnitTesting.MainMenu) |" Test menu

"" Git
nmap <leader>gw <Action>(ActivateVersionControlToolWindow) |" Git window
nmap <leader>gc <Action>(ActivateCommitToolWindow) |" Git commit
nmap <leader>gp <Action>(Vcs.Push) |" Git push

" Macros
"" Surround with ()
xnoremap <leader>( c()<Esc>P
xnoremap <leader>) c()<Esc>P

"" Surround with []
xnoremap <leader>[ c[]<Esc>P
xnoremap <leader>] c[]Esc>P

"" Surround with {}
xnoremap <leader>{ c{}<Esc>P
xnoremap <leader>} c{}<Esc>P

"" Surround with <>
xnoremap <leader>< c<><Esc>P
xnoremap <leader>> c<><Esc>P

" Quicker easymotion
map <leader>s <leader><leader>s

" Collisions
sethandler <C-B> a:ide
sethandler <C-C> a:ide
sethandler <C-D> a:vim
sethandler <C-E> a:vim
sethandler <C-F> a:ide
sethandler <C-G> a:ide
sethandler <C-I> a:vim
sethandler <C-J> a:ide
sethandler <C-K> a:ide
sethandler <C-L> a:ide
sethandler <C-N> a:ide
sethandler <C-O> a:vim
sethandler <C-P> a:ide
sethandler <C-R> a:ide
sethandler <C-S> a:vim
sethandler <C-V> a:ide
sethandler <C-W> a:ide
sethandler <C-X> a:ide
