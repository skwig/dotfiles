" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

let mapleader=" "

" Plugins
set highlightedyank
set easymotion
set NERDTree

set which-key
set notimeout

" General settings
set scrolloff=10
set incsearch
set relativenumber number
set clipboard^=ideaput
set keymodel=startsel,stopsel

" Disable annoying bells
set visualbell
set noerrorbells

" Don't use Ex mode, use Q for formatting.
map Q gq

" NOPs
nnoremap <leader> <NOP>

" Redo with Shift
nmap <S-u> <C-r>

" Collapsing everything doesnt seem to work out of the box
map zr <Action>(CollapseAllRegions)
map zR <Action>(ExpandAllRegions)

" Custom motions
"" Faster movement
map <S-k> 10k
map <S-j> 10j

"" Tabs
map <A-i> <Action>(PreviousTab)
map <A-o> <Action>(NextTab)

" IDE features
"" IDE motions
map <leader>{ <Action>(MethodUp)
map <leader>} <Action>(MethodDown)

"" Look
map <leader>ll <Action>(GotoDeclaration) |" Look (at)
map <leader>d <Action>(GotoDeclaration) |" (look at) Declaration [shorthand]
map <leader>li <Action>(GotoImplementation) |" Look (at) Implementation
map <leader>ls <Action>(GotoSuperMethod) |" Look (at) Super (method)
map <leader>lt <Action>(RiderGoToLinkedTypesAction) |" Look (at) Tests
map <leader>lu <Action>(ShowUsages) |" Look (at) Usages
map <leader>lp <Action>(QuickPreview) |" Look (at) Preview
map <leader>ln <Action>(ShowNavBar) |" Look (at) Navbar

"" Refactor
map <leader>rr <Action>(Refactorings.QuickListPopupAction) |" Refactor
map <leader>f <Action>(Refactorings.QuickListPopupAction) |" reFactor [shorthand]
map <leader>rm <Action>(ExtractMethod) |" Refactor Method
map <leader>rv <Action>(IntroduceVariable) |" Refactor Variable
map <leader>rp <Action>(IntroduceParameter) |" Refactor Parameter
map <leader>rc <Action>(IntroduceConstant) |" Refactor Constant
map <leader>rf <Action>(IntroduceField) |" Refactor Field
map <leader>ri <Action>(Inline) |" Refactor Inline

"" Generate
map <leader>gg <Action>(Generate) |" Generate
map <leader>gt <Action>(RiderGenerateUnitTestAction) |" Generate Test [copy of tg]
map <leader>gs <Action>(RiderSurroundWith) |" Generate Surround

"" Build
map <leader>bb <Action>(BuildSelection) |" Build
map <leader>bw <Action>(ActivateBuildToolWindow) |" Build Window
map <leader>bs <Action>(BuildSolutionAction) |" Build Solution
map <leader>bc <Action>(CancelBuildAction) |" Build cancel BROKEN
map <leader>bl <Action>(CleanSolutionAction) |" Build cLean

"" Breakpoint
map <leader>kk <Action>(ToggleLineBreakpoint) |" breaKpoint

"" Tests
map <leader>tt <Action>(RiderUnitTestRunContextAction) |" Test
map <leader>tw <Action>(ActivateTestsToolWindow) |" Test Window
map <leader>td <Action>(RiderUnitTestDebugContextAction) |" Test Debug (this)
map <leader>ts <Action>(RiderUnitTestRunCurrentSessionAction) |" Test Session
map <leader>tr <Action>(RiderUnitTestRepeatPreviousRunAction) |" Test Repeat
map <leader>tc <Action>(RiderUnitTestSessionAbortAction) |" Test Cancel
map <leader>tg <Action>(RiderGenerateUnitTestAction) |" Test Generate [copy of gt]
map <leader>tm <Action>(Rider.UnitTesting.MainMenu) |" Test Menu

"" Editor
map <leader>eq <Action>(CloseContent) |" Editor Quit

"" Tool window
map <leader>wq <Action>(HideActiveWindow) |" (tool) Window Quit
map <leader>wo <Action>(JumpToLastWindow) |" (tool) Window Outer 
map <leader>wk <Action>(ResizeToolWindowUp) |" (tool) Window K
map <leader>wj <Action>(ResizeToolWindowDown) |" (tool) Window J
map <leader>wp <Action>(ActivateProblemsViewToolWindow) |" (tool) Window Problems
map <leader>wv <Action>(ActivateVersionControlToolWindow) |" (tool) Window Vcs [copy of vw]
map <leader>wt <Action>(ActivateTestsToolWindow) |" (tool) Window Test [copy of tw]
map <leader>wb <Action>(ActivateBuildToolWindow) |" (tool) Window Build [copy of bw]

"" VCS / Git
nmap <leader>vw <Action>(ActivateVersionControlToolWindow) |" Vcs Window
nmap <leader>vc <Action>(ActivateCommitToolWindow) |" Vcs Commit
nmap <leader>vp <Action>(Vcs.Push) |" Vcs Push

" Macros
" Currently none

" Quicker easymotion
map <leader>s <leader><leader>s

" Collisions
sethandler <C-B> a:ide
sethandler <C-C> a:ide
sethandler <C-D> a:vim
sethandler <C-E> a:vim
sethandler <C-F> a:ide
sethandler <C-G> a:ide
sethandler <C-H> a:ide
sethandler <C-I> a:vim
sethandler <C-J> a:ide
sethandler <C-K> a:ide
sethandler <C-L> a:ide
sethandler <C-N> a:ide
sethandler <C-O> a:vim
sethandler <C-P> a:ide
sethandler <C-R> a:ide
sethandler <C-S> a:vim
sethandler <C-V> a:ide
sethandler <C-W> a:ide
sethandler <C-X> a:ide
